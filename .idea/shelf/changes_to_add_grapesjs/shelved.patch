Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"c4i-system\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"d3\": \"^5.12.0\",\n    \"grommet\": \"^2.7.11\",\n    \"react\": \"^16.11.0\",\n    \"react-bar-chart\": \"^0.1.2\",\n    \"react-dom\": \"^16.11.0\",\n    \"react-multiselect-box\": \"^0.2.3\",\n    \"react-scripts\": \"3.2.0\",\n    \"styled-components\": \"^4.4.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(date 1572608524000)
+++ package.json	(date 1572857160000)
@@ -4,6 +4,8 @@
   "private": true,
   "dependencies": {
     "d3": "^5.12.0",
+    "grapesjs": "^0.15.8",
+    "grapesjs-preset-webpage": "^0.1.11",
     "grommet": "^2.7.11",
     "react": "^16.11.0",
     "react-bar-chart": "^0.1.2",
Index: src/modules/securityRequirements/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from 'react';\nimport * as d3 from \"d3\";\nimport questionsData from \"../../csvs/questions.csv\";\nimport data from \"../../csvs/requirements.csv\";\nimport './securityRequirements.css'\n\nconst StudentFilter = ({updateSearch, searchText}) => {\n\n    function handleChange(event) {\n        updateSearch(event.target.value);\n    }\n\n    return (\n        <input type=\"text\" placeholder=\"Search here for Questions\" className=\"input-search\" onChange={handleChange}\n               value={searchText}/>\n    )\n};\n\nconst Student = ({student}) => <tbody>\n<tr>\n    <td className=\"student-item\">{student.questionTitle}</td>\n    <td className=\"student-item\">{student.metrices}</td>\n</tr>\n</tbody>;\n\nconst StudentList = ({students, filter}) => {\n    function filterStudents(students) {\n        if (!filter) {\n            return students\n        }\n        return students.filter((student) => student.questionTitle.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n    }\n\n    return (\n        <table className=\"student-list\">\n            <thead>\n            <tr>\n                <th>Questions</th>\n                <th>Metrices</th>\n            </tr>\n            </thead>\n            {filterStudents(students)\n                .map((student) => <Student key={student.id} student={student}/>)}\n        </table>\n    )\n};\n\nconst Requirements = ({requirmentId, calculatePercentage, onSelectRequirements}) => {\n\n    const [state, setState] = useState({\n        requirements: [],\n        questions: []\n    });\n    const [filter, setFilter] = useState('');\n\n    useEffect(() => {\n        function readCsvForRequirements() {\n            d3.csv(data).then(function (response) {\n                response.pop();\n                d3.csv(questionsData).then(function (questionsResponse) {\n                    setState({...state, questions: questionsResponse, requirements: response});\n                }).catch(function (err) {\n                    throw err;\n                })\n            }).catch(function (err) {\n                throw err;\n            })\n        }\n\n        readCsvForRequirements();\n    }, []);\n\n    function updateSearch(inputValue) {\n        setFilter(inputValue);\n    }\n\n    function handleRequirementChange(event) {\n        const {questions} = state;\n        const filteredQuestions = questions.filter((item) => item.id === event.target.value);\n        setState({...state, questions: filteredQuestions});\n        onSelectRequirements(event.target.value);\n    }\n\n    const {requirements, questions} = state;\n    return <section className=\"quiz_section\" id=\"quizeSection\">\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12\" style={{marginTop: \"10px\"}}>\n                    <div className=\"quiz_content_area\">\n                        <h1 className=\"quiz_title\">Security Requirements</h1>\n                        <div className=\"row\">\n                            <div className=\"col-sm-12 align-center mb-10\">\n                                <select onChange={handleRequirementChange}>\n                                    <option value=\"0\">Select Secuirty Requirements</option>\n                                    {requirements.map((item) => {\n                                        return <option key={item.value} value={item.value}>{item.desc}</option>\n                                    })}\n                                </select>\n                            </div>\n                            <div className=\"col-sm-12\">\n                                <h1 className=\"app__title\">Questions and Metrices</h1>\n                                {(questions.length > 0 && requirmentId) && <>\n                                    <StudentFilter updateSearch={updateSearch}\n                                                   searchText={filter}/>\n                                    <StudentList filter={filter} students={questions}/></>}\n                            </div>\n                        </div>\n                        <div className=\"col-sm-12\">\n                            <div className=\"quiz_next\">\n                                <button className=\"quiz_continueBtn\" disabled={requirmentId === '' ? true : false}\n                                        onClick={() => calculatePercentage()}>Calculate\n                                </button>\n                            </div>\n                            {/* end of quiz_next */}\n                        </div>\n                        {/* end of col12 */}\n                        {/* end of quiz_card_area */}\n                    </div>\n                    {/* end of quiz_content_area */}\n                </div>\n                {/* end of col12 */}\n            </div>\n            {/* end of row */}\n        </div>\n        {/* end of container */}\n    </section>\n};\n\nexport default Requirements;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/modules/securityRequirements/index.jsx	(date 1572608524000)
+++ src/modules/securityRequirements/index.jsx	(date 1572857482000)
@@ -3,6 +3,9 @@
 import questionsData from "../../csvs/questions.csv";
 import data from "../../csvs/requirements.csv";
 import './securityRequirements.css'
+import 'grapesjs/dist/css/grapes.min.css';
+import grapesjs from 'grapesjs';
+import gjsPresetWebpage from 'grapesjs-preset-webpage';
 
 const StudentFilter = ({updateSearch, searchText}) => {
 
@@ -81,49 +84,22 @@
         onSelectRequirements(event.target.value);
     }
 
+    var editor = grapesjs.init({
+        container: '#gjs',
+        plugins: [gjsPresetWebpage],
+        pluginsOpts: {
+            gjsPresetWebpage: {
+                // options
+            }
+        }
+    });
     const {requirements, questions} = state;
-    return <section className="quiz_section" id="quizeSection">
-        <div className="container">
-            <div className="row">
-                <div className="col-sm-12" style={{marginTop: "10px"}}>
-                    <div className="quiz_content_area">
-                        <h1 className="quiz_title">Security Requirements</h1>
-                        <div className="row">
-                            <div className="col-sm-12 align-center mb-10">
-                                <select onChange={handleRequirementChange}>
-                                    <option value="0">Select Secuirty Requirements</option>
-                                    {requirements.map((item) => {
-                                        return <option key={item.value} value={item.value}>{item.desc}</option>
-                                    })}
-                                </select>
-                            </div>
-                            <div className="col-sm-12">
-                                <h1 className="app__title">Questions and Metrices</h1>
-                                {(questions.length > 0 && requirmentId) && <>
-                                    <StudentFilter updateSearch={updateSearch}
-                                                   searchText={filter}/>
-                                    <StudentList filter={filter} students={questions}/></>}
-                            </div>
-                        </div>
-                        <div className="col-sm-12">
-                            <div className="quiz_next">
-                                <button className="quiz_continueBtn" disabled={requirmentId === '' ? true : false}
-                                        onClick={() => calculatePercentage()}>Calculate
-                                </button>
-                            </div>
-                            {/* end of quiz_next */}
-                        </div>
-                        {/* end of col12 */}
-                        {/* end of quiz_card_area */}
-                    </div>
-                    {/* end of quiz_content_area */}
-                </div>
-                {/* end of col12 */}
-            </div>
-            {/* end of row */}
+    return <>
+        <div id="gjs">
+            <h1>Hello World Component!</h1>
         </div>
-        {/* end of container */}
-    </section>
+        <div id="blocks"></div>
+    </>
 };
 
 export default Requirements;
